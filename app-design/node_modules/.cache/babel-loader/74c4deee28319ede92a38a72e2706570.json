{"ast":null,"code":"import _classCallCheck from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/Messages/Message.js\";\nimport React, { Component } from 'react';\nimport { Avatar, Layout } from 'antd';\nimport qoobee from \"../../images/qoobee.jpg\";\nimport background from \"../../images/cutePig.png\";\nimport '../../css/Messages/messages.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport connect from \"react-redux/es/connect/connect\";\nimport { ChatActions } from '../../Redux/Actions/ChatActions';\nimport { ChatService } from '../../Services/ChatService';\nvar Header = Layout.Header,\n    Footer = Layout.Footer;\nvar headerStyle = {\n  height: '100px',\n  backgroundColor: 'white',\n  borderBottom: '1px solid #ebebe0 ',\n  padding: '10px'\n};\nvar footerStyle = {\n  height: '80px',\n  backgroundColor: 'pink',\n  borderTop: '1px solid #ebebe0 ',\n  padding: '0px'\n};\nvar ChatName = {\n  marginTop: '-70px',\n  marginLeft: '85px'\n};\nvar typeCauseScroll = false;\nvar pullCauseScroll = false;\nvar changeMessageCauseScroll = false;\nvar checkedConversations = [];\nvar ownerId = JSON.parse(localStorage.getItem('user')) != null ? JSON.parse(localStorage.getItem('user')).phone : '';\nvar ownerName = JSON.parse(localStorage.getItem('user')) != null ? JSON.parse(localStorage.getItem('user')).userName : '';\n\nvar Message =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Message, _Component);\n\n  function Message(props) {\n    var _this;\n\n    _classCallCheck(this, Message);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Message).call(this, props));\n\n    _this.typeText = function (event) {\n      // let code = (event.keyCode ? event.keyCode : event.which);\n      if (event.keyCode === 13 && !event.shiftKey && _this.props.currentConversationId != null) {\n        var message = event.target.value; // let temptMessages = this.state.allMessages;\n        // temptMessages.get(this.props.currentConversationId).push({\n        //     sender: ownerId,\n        //     senderName: ownerName,\n        //     content: message\n        // });\n        // this.setState({allMessages: temptMessages});\n\n        typeCauseScroll = true;\n        pullCauseScroll = false; //send message to service API\n\n        var messageToServer = {\n          messageType: 'sendMessage',\n          content: {\n            sender: ownerId,\n            content: message,\n            conversationID: _this.props.currentConversationId\n          }\n        };\n\n        _this.props.websocket.send(JSON.stringify(messageToServer));\n\n        document.getElementById('textArea').value = \"\";\n      }\n    };\n\n    _this.displayMessages = function () {\n      if (_this.props.currentConversationId != null && _this.state.allMessages.get(_this.props.currentConversationId) != null) {\n        var obj = _this.state.allMessages.get(_this.props.currentConversationId); // this.state.currentConversationName\n\n\n        console.log('display ', obj.length);\n\n        if (obj.length > 0) {\n          var messages = obj.map(function (item) {\n            return React.createElement(\"li\", {\n              className: item.senderID == ownerId ? 'sent' : 'replies',\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 169\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"sender\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 171\n              },\n              __self: this\n            }, item.senderName), React.createElement(\"p\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 172\n              },\n              __self: this\n            }, item.content), React.createElement(\"span\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 173\n              },\n              __self: this\n            }, new Date(parseInt(item.time)).toLocaleString()));\n          });\n          return messages;\n        }\n      }\n    };\n\n    _this.onMessageScroll = function (event) {\n      var messageBoard = document.getElementById('messages');\n\n      if (messageBoard.scrollTop === 0 && _this.state.allMessages.get(_this.props.currentConversationId) != null) {\n        _this.props.getMessage(_this.props.currentConversationId);\n\n        console.log(\"End\");\n        var messages = [{\n          id: \"1\",\n          sender: 'Nam',\n          type: 'sent',\n          message: \"Nà ní\"\n        }, {\n          id: \"2\",\n          sender: 'BigBid',\n          type: 'replies',\n          message: \"nà ní 2\"\n        }, {\n          id: \"3\",\n          sender: 'Nam',\n          type: 'sent',\n          message: \"nà ní 2\"\n        }];\n\n        _this.appendMessages(messages);\n\n        typeCauseScroll = false;\n        pullCauseScroll = true;\n      }\n    };\n\n    _this.appendMessages = function (messages) {\n      var temptMessages = messages.concat(_this.state.messages); // temptMessages.concat(this.state.messages);\n      // console.log(temptMessages);\n      // this.setState({messages: temptMessages});\n      // this.state.\n      // console.log(this.state.messages);\n    };\n\n    _this.state = {\n      currentConversationName: '',\n      websocket: '',\n      allMessages: new Map()\n    };\n    return _this;\n  }\n\n  _createClass(Message, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (typeCauseScroll) {\n        // console.log(prevState.messages);\n        var messageBoard = document.getElementById('messages');\n        messageBoard.scroll(0, messageBoard.scrollHeight);\n        typeCauseScroll = false;\n        pullCauseScroll = false;\n        changeMessageCauseScroll = false;\n      } else if (pullCauseScroll) {\n        // console.log(prevState.messages);\n        var _messageBoard = document.getElementById('messages');\n\n        _messageBoard.scroll(0, 20);\n\n        typeCauseScroll = false;\n        pullCauseScroll = false;\n        changeMessageCauseScroll = false;\n      } else if (changeMessageCauseScroll) {\n        var _messageBoard2 = document.getElementById('messages');\n\n        _messageBoard2.scroll(0, _messageBoard2.scrollHeight);\n\n        changeMessageCauseScroll = false;\n        typeCauseScroll = false;\n        pullCauseScroll = false;\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      var _this2 = this;\n\n      if (nextProps.currentConversationId !== this.props.currentConversationId && !checkedConversations.includes(nextProps.currentConversationId)) {\n        console.log(\"selected chatId \", nextProps.currentConversationId); // this.props.getMessage(nextProps.currentConversationId, 0);\n\n        ChatService.getMessages(nextProps.currentConversationId).then(function (messages) {\n          console.log('message ', messages);\n          var temptAllMessage = _this2.state.allMessages;\n          var message1 = [];\n\n          if (messages != null) {\n            temptAllMessage.set(nextProps.currentConversationId, messages);\n          } else {\n            temptAllMessage.set(nextProps.currentConversationId, message1);\n          }\n\n          changeMessageCauseScroll = true;\n\n          _this2.setState({\n            allMessages: temptAllMessage\n          });\n\n          checkedConversations.push(nextProps.currentConversationId);\n          console.log(_this2.state.allMessages);\n        }).catch(function (error) {});\n      } else {\n        changeMessageCauseScroll = true;\n        console.log('scroll to get messsage');\n      }\n\n      if (nextProps.socketMessage != null) {\n        console.log('socket message ', nextProps.socketMessage);\n        var message = nextProps.socketMessage;\n        var temptAllMessage = this.state.allMessages;\n        var conversationID = message.conversationID;\n        temptAllMessage.get(conversationID).push({\n          senderID: message.senderID,\n          senderName: message.senderName,\n          content: message.content,\n          time: message.time\n        });\n        this.setState({\n          allMessages: temptAllMessage\n        });\n      } // if (nextProps.messages !== this.props.messages) {\n      //     console.log(isScrolling);\n      //     if(!isScrolling) {\n      //         console.log(\"id \", this.props.currentConversationId, \" messsage\", nextProps.messages.message);\n      //         let temptAllMessage = this.state.allMessages;\n      //         // temptAllMessage.push(nextProps.messages);\n      //         temptAllMessage.set(this.props.currentConversationId, nextProps.messages.message)\n      //         this.setState({currentMessages: nextProps.messages.message});\n      //         this.setState({allMessages: temptAllMessage});\n      //         // changeMessageCauseScroll = true;\n      //         isScrolling = false;\n      //     }\n      //     else{\n      //     }\n      // }\n\n\n      console.log(this.state.allMessages);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.currentConversationId != null) {\n        return React.createElement(Layout, {\n          style: {\n            borderLeft: \"1px solid #ebebe0\",\n            backgroundColor: 'white'\n          },\n          className: \"Layout\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        }, React.createElement(Header, {\n          style: headerStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227\n          },\n          __self: this\n        }, React.createElement(Avatar, {\n          size: 80,\n          src: qoobee,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228\n          },\n          __self: this\n        }), React.createElement(\"h3\", {\n          style: ChatName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229\n          },\n          __self: this\n        }, this.state.currentConversationName)), React.createElement(\"div\", {\n          className: \"messages\",\n          onScroll: this.onMessageScroll,\n          id: \"messages\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }, React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        }, this.displayMessages())));\n      } else {\n        return React.createElement(Layout, {\n          style: {\n            borderLeft: \"1px solid #ebebe0\",\n            backgroundColor: 'white'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"backgroundChat\",\n          onScroll: this.onMessageScroll,\n          id: \"messages\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: background,\n          alt: \"Notebook\",\n          style: {\n            maxWidth: '100%',\n            maxHeight: '100%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247\n          },\n          __self: this\n        })));\n      }\n    }\n  }]);\n\n  return Message;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log();\n  return {\n    currentConversationId: state.chatReducer.conversationId,\n    websocket: state.socketReducer.websocket,\n    messages: state.chatReducer.messages,\n    socketMessage: state.socketReducer.socketMessage\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getMessage: function getMessage(conversationId, index) {\n      return dispatch(ChatActions.get_Message(conversationId, index));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Message);","map":{"version":3,"sources":["/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/Messages/Message.js"],"names":["React","Component","Avatar","Layout","qoobee","background","connect","ChatActions","ChatService","Header","Footer","headerStyle","height","backgroundColor","borderBottom","padding","footerStyle","borderTop","ChatName","marginTop","marginLeft","typeCauseScroll","pullCauseScroll","changeMessageCauseScroll","checkedConversations","ownerId","JSON","parse","localStorage","getItem","phone","ownerName","userName","Message","props","typeText","event","keyCode","shiftKey","currentConversationId","message","target","value","messageToServer","messageType","content","sender","conversationID","websocket","send","stringify","document","getElementById","displayMessages","state","allMessages","get","obj","console","log","length","messages","map","item","senderID","senderName","Date","parseInt","time","toLocaleString","onMessageScroll","messageBoard","scrollTop","getMessage","id","type","appendMessages","temptMessages","concat","currentConversationName","Map","prevProps","prevState","snapshot","scroll","scrollHeight","nextProps","nextContext","includes","getMessages","then","temptAllMessage","message1","set","setState","push","catch","error","socketMessage","borderLeft","maxWidth","maxHeight","mapStateToProps","chatReducer","conversationId","socketReducer","mapDispatchToProps","dispatch","index","get_Message"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Avatar, Layout} from 'antd';\nimport qoobee from \"../../images/qoobee.jpg\";\nimport background from \"../../images/cutePig.png\";\nimport '../../css/Messages/messages.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport connect from \"react-redux/es/connect/connect\";\nimport {ChatActions} from '../../Redux/Actions/ChatActions';\nimport {ChatService} from '../../Services/ChatService';\n\nconst {\n    Header, Footer,\n} = Layout;\n\nconst headerStyle = {\n    height: '100px', backgroundColor: 'white', borderBottom: '1px solid #ebebe0 ', padding: '10px'\n}\n\nconst footerStyle = {\n    height: '80px', backgroundColor: 'pink', borderTop: '1px solid #ebebe0 ', padding: '0px'\n}\n\nconst ChatName = {\n    marginTop: '-70px', marginLeft: '85px'\n}\n\nvar typeCauseScroll = false\nvar pullCauseScroll = false\nvar changeMessageCauseScroll = false;\n\nvar checkedConversations = [];\nvar ownerId = JSON.parse(localStorage.getItem('user'))!=null?JSON.parse(localStorage.getItem('user')).phone:'';\nvar ownerName = JSON.parse(localStorage.getItem('user'))!=null?JSON.parse(localStorage.getItem('user')).userName:'';\n\nclass Message extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentConversationName: '',\n            websocket: '',\n            allMessages: new Map(),\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (typeCauseScroll) {\n            // console.log(prevState.messages);\n            let messageBoard = document.getElementById('messages');\n            messageBoard.scroll(0, messageBoard.scrollHeight);\n            typeCauseScroll = false;\n            pullCauseScroll = false;\n            changeMessageCauseScroll = false;\n        } else if (pullCauseScroll) {\n            // console.log(prevState.messages);\n            let messageBoard = document.getElementById('messages');\n            messageBoard.scroll(0, 20);\n            typeCauseScroll = false;\n            pullCauseScroll = false;\n            changeMessageCauseScroll = false;\n        } else if (changeMessageCauseScroll) {\n            let messageBoard = document.getElementById('messages');\n            messageBoard.scroll(0, messageBoard.scrollHeight);\n            changeMessageCauseScroll = false;\n            typeCauseScroll = false;\n            pullCauseScroll = false;\n        }\n\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.currentConversationId !== this.props.currentConversationId\n            && !checkedConversations.includes(nextProps.currentConversationId)\n        ) {\n            console.log(\"selected chatId \", nextProps.currentConversationId);\n            // this.props.getMessage(nextProps.currentConversationId, 0);\n            ChatService.getMessages(nextProps.currentConversationId)\n                .then(messages => {\n                    console.log('message ', messages);\n                    let temptAllMessage = this.state.allMessages;\n                    let message1 = [];\n\n                    if (messages != null) {\n                        temptAllMessage.set(nextProps.currentConversationId, messages)\n                    } else {\n                        temptAllMessage.set(nextProps.currentConversationId, message1)\n                    }\n                    changeMessageCauseScroll = true;\n                    this.setState({allMessages: temptAllMessage});\n                    checkedConversations.push(nextProps.currentConversationId);\n                    console.log(this.state.allMessages);\n\n                })\n                .catch(error => {\n\n                });\n\n        } else {\n            changeMessageCauseScroll = true;\n            console.log('scroll to get messsage')\n        }\n        if (nextProps.socketMessage != null) {\n            console.log('socket message ', nextProps.socketMessage);\n            let message = nextProps.socketMessage;\n            let temptAllMessage = this.state.allMessages;\n            let conversationID = message.conversationID;\n            temptAllMessage.get(conversationID).push({\n                senderID: message.senderID,\n                senderName: message.senderName,\n                content: message.content,\n                time: message.time\n            });\n            this.setState({allMessages: temptAllMessage});\n        }\n\n        // if (nextProps.messages !== this.props.messages) {\n        //     console.log(isScrolling);\n        //     if(!isScrolling) {\n        //         console.log(\"id \", this.props.currentConversationId, \" messsage\", nextProps.messages.message);\n        //         let temptAllMessage = this.state.allMessages;\n        //         // temptAllMessage.push(nextProps.messages);\n        //         temptAllMessage.set(this.props.currentConversationId, nextProps.messages.message)\n        //         this.setState({currentMessages: nextProps.messages.message});\n        //         this.setState({allMessages: temptAllMessage});\n        //         // changeMessageCauseScroll = true;\n        //         isScrolling = false;\n        //     }\n        //     else{\n        //     }\n        // }\n        console.log(this.state.allMessages)\n    }\n\n    typeText = (event) => {\n        // let code = (event.keyCode ? event.keyCode : event.which);\n        if (event.keyCode === 13 && !event.shiftKey && this.props.currentConversationId != null) {\n            let message = event.target.value;\n            // let temptMessages = this.state.allMessages;\n            // temptMessages.get(this.props.currentConversationId).push({\n            //     sender: ownerId,\n            //     senderName: ownerName,\n            //     content: message\n            // });\n            // this.setState({allMessages: temptMessages});\n            typeCauseScroll = true;\n            pullCauseScroll = false;\n            //send message to service API\n            let messageToServer = {\n                messageType: 'sendMessage',\n                content: {\n                    sender: ownerId,\n                    content: message,\n                    conversationID: this.props.currentConversationId\n                }\n            }\n            this.props.websocket.send(JSON.stringify(messageToServer));\n            document.getElementById('textArea').value = \"\";\n        }\n    }\n\n\n    displayMessages = () => {\n        if (this.props.currentConversationId != null && this.state.allMessages.get(this.props.currentConversationId) != null) {\n            var obj = this.state.allMessages.get(this.props.currentConversationId);\n            // this.state.currentConversationName\n            console.log('display ', obj.length);\n            if (obj.length > 0) {\n                const messages = obj.map((item) =>\n                    <li className={item.senderID == ownerId ? 'sent' : 'replies'}>\n                        {/*<img src=\"http://emilcarlsson.se/assets/mikeross.png\" alt=\"\"/>*/}\n                        <div className=\"sender\">{item.senderName}</div>\n                        <p>{item.content}</p>\n                        <span>{new Date(parseInt(item.time)).toLocaleString()}</span>\n                    </li>\n                );\n                return messages;\n            }\n        }\n    }\n\n    onMessageScroll = (event) => {\n\n        let messageBoard = document.getElementById('messages');\n        if (messageBoard.scrollTop === 0 && this.state.allMessages.get(this.props.currentConversationId) != null) {\n            this.props.getMessage(this.props.currentConversationId);\n            console.log(\"End\");\n            let messages = [\n                {\n                    id: \"1\",\n                    sender: 'Nam',\n                    type: 'sent',\n                    message: \"Nà ní\"\n                },\n                {\n                    id: \"2\",\n                    sender: 'BigBid',\n                    type: 'replies',\n                    message: \"nà ní 2\"\n                },\n                {\n                    id: \"3\",\n                    sender: 'Nam',\n                    type: 'sent',\n                    message: \"nà ní 2\"\n                }];\n            this.appendMessages(messages);\n            typeCauseScroll = false;\n            pullCauseScroll = true;\n        }\n\n    }\n\n    appendMessages = (messages) => {\n        let temptMessages = messages.concat(this.state.messages);\n        // temptMessages.concat(this.state.messages);\n        // console.log(temptMessages);\n        // this.setState({messages: temptMessages});\n        // this.state.\n        // console.log(this.state.messages);\n    }\n\n\n    render() {\n        if(this.props.currentConversationId!=null) {\n            return (\n                <Layout style={{borderLeft: \"1px solid #ebebe0\", backgroundColor:'white'}} className=\"Layout\">\n                    <Header style={headerStyle}>\n                        <Avatar size={80} src={qoobee}/>\n                        <h3 style={ChatName}>{this.state.currentConversationName}</h3>\n                    </Header>\n\n                    <div className=\"messages\" onScroll={this.onMessageScroll} id=\"messages\">\n                        <ul>\n                            {this.displayMessages()}\n                        </ul>\n                    </div>\n\n\n\n                </Layout>\n            );\n        }\n        else{\n            return (\n                <Layout style={{borderLeft: \"1px solid #ebebe0\", backgroundColor:'white'}} >\n                    <div  className=\"backgroundChat\" onScroll={this.onMessageScroll} id=\"messages\">\n                        <img src={background} alt=\"Notebook\" style={{maxWidth: '100%', maxHeight:'100%'}}/>\n                    </div>\n                </Layout>\n            );\n        }\n    }\n}\n\nconst mapStateToProps = (state) => {\n    console.log()\n    return {\n        currentConversationId: state.chatReducer.conversationId,\n        websocket: state.socketReducer.websocket,\n        messages: state.chatReducer.messages,\n        socketMessage: state.socketReducer.socketMessage,\n    }\n};\nconst mapDispatchToProps = (dispatch) => ({\n    getMessage: (conversationId, index) => dispatch(ChatActions.get_Message(conversationId, index)),\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Message);"]},"metadata":{},"sourceType":"module"}