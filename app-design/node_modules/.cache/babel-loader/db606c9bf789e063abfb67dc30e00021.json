{"ast":null,"code":"import _classCallCheck from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/Messages/Message.js\";\nimport React, { Component } from 'react';\nimport { Avatar, Layout } from 'antd';\nimport qoobee from \"../../images/qoobee.jpg\";\nimport '../../css/Messages/messages.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport connect from \"react-redux/es/connect/connect\";\nimport { ChatActions } from '../../Redux/Actions/ChatActions';\nvar Header = Layout.Header,\n    Footer = Layout.Footer;\nvar headerStyle = {\n  height: '100px',\n  backgroundColor: 'white',\n  borderBottom: '1px solid #ebebe0 ',\n  padding: '10px'\n};\nvar footerStyle = {\n  height: '80px',\n  backgroundColor: 'white',\n  borderTop: '1px solid #ebebe0 ',\n  padding: '0px'\n};\nvar ChatName = {\n  marginTop: '-70px',\n  marginLeft: '85px'\n};\nvar typeCauseScroll = false;\nvar pullCauseScroll = false;\nvar checkedConversations = [];\nvar currentConversationId = '';\n\nvar Message =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Message, _Component);\n\n  function Message(props) {\n    var _this;\n\n    _classCallCheck(this, Message);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Message).call(this, props));\n\n    _this.typeText = function (event) {\n      // let code = (event.keyCode ? event.keyCode : event.which);\n      if (event.keyCode === 13 && !event.shiftKey) {\n        var message = event.target.value;\n        var temptMessages = _this.state.allMessages;\n        temptMessages.get(_this.props.currentConversationId).push({\n          id: \"4\",\n          sender: 'Nam',\n          type: 'sent',\n          message: message\n        });\n\n        _this.setState({\n          allMessages: temptMessages\n        });\n\n        typeCauseScroll = true;\n        pullCauseScroll = false; // event.target.value = null;\n        //send message to service API\n        // this.props.websocket.send(message);\n\n        document.getElementById('textArea').value = \"\";\n      }\n    };\n\n    _this.displayMessages = function () {\n      if (_this.props.currentConversationId != null && _this.state.allMessages.get(_this.props.currentConversationId) != null) {\n        // const messages = this.state.allMessages.get(this.props.currentConversationId).map((item) =>\n        //     <li className={item.type}>\n        //         <img src=\"http://emilcarlsson.se/assets/mikeross.png\" alt=\"\"/>\n        //         <p>{item.message}</p>\n        //     </li>\n        // );\n        // return messages;\n        var obj = _this.state.allMessages.get(_this.props.currentConversationId);\n\n        console.log('display ', obj.toString());\n        var messages = obj.map(function (item) {\n          return React.createElement(\"li\", {\n            className: item.type,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            src: \"http://emilcarlsson.se/assets/mikeross.png\",\n            alt: \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          }, item.message));\n        });\n        return messages;\n      }\n    };\n\n    _this.onMessageScroll = function (event) {\n      var messageBoard = document.getElementById('messages'); // console.log(e.scrollTop);\n\n      if (messageBoard.scrollTop === 1) {\n        alert(\"End\");\n        var messages = [{\n          id: \"1\",\n          sender: 'Nam',\n          type: 'sent',\n          message: \"Nà ní\"\n        }, {\n          id: \"2\",\n          sender: 'BigBid',\n          type: 'replies',\n          message: \"nà ní 2\"\n        }, {\n          id: \"3\",\n          sender: 'Nam',\n          type: 'sent',\n          message: \"nà ní 2\"\n        }];\n\n        _this.appendMessages(messages);\n\n        typeCauseScroll = false;\n        pullCauseScroll = true; // messageBoard.scroll(0, 100);\n      }\n    };\n\n    _this.appendMessages = function (messages) {\n      var temptMessages = messages.concat(_this.state.messages); // temptMessages.concat(this.state.messages);\n      // console.log(temptMessages);\n\n      _this.setState({\n        messages: temptMessages\n      }); // this.state.\n      // console.log(this.state.messages);\n\n    };\n\n    _this.state = {\n      websocket: '',\n      currentMessages: [],\n      allMessages: new Map()\n    };\n    return _this;\n  }\n\n  _createClass(Message, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (typeCauseScroll) {\n        // console.log(prevState.messages);\n        var messageBoard = document.getElementById('messages');\n        messageBoard.scroll(0, messageBoard.scrollHeight);\n        typeCauseScroll = false;\n        pullCauseScroll = false;\n      } else if (pullCauseScroll) {\n        // console.log(prevState.messages);\n        var _messageBoard = document.getElementById('messages');\n\n        _messageBoard.scroll(0, 20);\n\n        typeCauseScroll = false;\n        pullCauseScroll = false;\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      if (nextProps.currentConversationId != this.props.currentConversationId && !checkedConversations.includes(nextProps.currentConversationId)) {\n        // console.log(\"selected chatId \", nextProps.currentConversationId);\n        this.props.getMessage(nextProps.currentConversationId, 0);\n        checkedConversations.push(nextProps.currentConversationId);\n      } else {// const findA =(id)=> this.state.allMessages.filter((value)=>{\n        //     return value.id==id;\n        // });\n        // let obj = findA(nextProps.currentConversationId)[0];\n        // if(obj!=null) {\n        //     console.log(\"selected messages \",obj.id);\n        // }\n      }\n\n      if (nextProps.messages != this.props.messages) {\n        console.log(\"id \", this.props.currentConversationId, \" messsage\", nextProps.messages.message);\n        var temptAllMessage = this.state.allMessages; // temptAllMessage.push(nextProps.messages);\n\n        temptAllMessage.set(this.props.currentConversationId, nextProps.messages.message);\n        this.setState({\n          currentMessages: nextProps.messages.message\n        });\n        this.setState({\n          allMessages: temptAllMessage\n        });\n      } else {}\n\n      console.log(this.state.allMessages);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, {\n        style: {\n          borderLeft: \"1px solid #ebebe0\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(Header, {\n        style: headerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(Avatar, {\n        size: 80,\n        src: qoobee,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        style: ChatName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Ms. QooBee\")), React.createElement(\"div\", {\n        className: \"messages\",\n        onScroll: this.onMessageScroll,\n        id: \"messages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, this.displayMessages())), React.createElement(Footer, {\n        style: footerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"message-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        id: \"textArea\",\n        style: {\n          backgroundColor: 'pink'\n        },\n        placeholder: \"Write your message... \",\n        onKeyDown: this.typeText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"tool\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"submit\",\n        onClick: this.typeText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-paper-plane\",\n        style: {\n          fontSize: '24px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      })))))));\n    }\n  }]);\n\n  return Message;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentConversationId: state.chatReducer.conversationId,\n    websocket: state.socketReducer.websocket,\n    messages: state.chatReducer.messages\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getMessage: function getMessage(conversationId, index) {\n      return dispatch(ChatActions.get_Message(conversationId, index));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Message);","map":{"version":3,"sources":["/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/Messages/Message.js"],"names":["React","Component","Avatar","Layout","qoobee","connect","ChatActions","Header","Footer","headerStyle","height","backgroundColor","borderBottom","padding","footerStyle","borderTop","ChatName","marginTop","marginLeft","typeCauseScroll","pullCauseScroll","checkedConversations","currentConversationId","Message","props","typeText","event","keyCode","shiftKey","message","target","value","temptMessages","state","allMessages","get","push","id","sender","type","setState","document","getElementById","displayMessages","obj","console","log","toString","messages","map","item","onMessageScroll","messageBoard","scrollTop","alert","appendMessages","concat","websocket","currentMessages","Map","prevProps","prevState","snapshot","scroll","scrollHeight","nextProps","nextContext","includes","getMessage","temptAllMessage","set","borderLeft","fontSize","mapStateToProps","chatReducer","conversationId","socketReducer","mapDispatchToProps","dispatch","index","get_Message"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Avatar, Layout} from 'antd';\nimport qoobee from \"../../images/qoobee.jpg\";\nimport '../../css/Messages/messages.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport connect from \"react-redux/es/connect/connect\";\nimport {ChatActions} from '../../Redux/Actions/ChatActions';\n\nconst {\n    Header, Footer,\n} = Layout;\n\nconst headerStyle = {\n    height: '100px', backgroundColor: 'white', borderBottom: '1px solid #ebebe0 ', padding: '10px'\n}\n\nconst footerStyle = {\n    height: '80px', backgroundColor: 'white', borderTop: '1px solid #ebebe0 ', padding: '0px'\n}\n\nconst ChatName = {\n    marginTop: '-70px', marginLeft: '85px'\n}\n\nvar typeCauseScroll = false\nvar pullCauseScroll = false\n\nvar checkedConversations = [];\nvar currentConversationId = '';\n\nclass Message extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            websocket: '',\n            currentMessages: [],\n            allMessages: new Map(),\n        };\n    }\n\n    componentDidMount() {\n\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (typeCauseScroll) {\n            // console.log(prevState.messages);\n            let messageBoard = document.getElementById('messages');\n            messageBoard.scroll(0, messageBoard.scrollHeight);\n            typeCauseScroll = false;\n            pullCauseScroll = false;\n        } else if (pullCauseScroll) {\n            // console.log(prevState.messages);\n            let messageBoard = document.getElementById('messages');\n            messageBoard.scroll(0, 20);\n            typeCauseScroll = false;\n            pullCauseScroll = false;\n        }\n\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.currentConversationId != this.props.currentConversationId\n            && !checkedConversations.includes(nextProps.currentConversationId)\n        ) {\n            // console.log(\"selected chatId \", nextProps.currentConversationId);\n            this.props.getMessage(nextProps.currentConversationId, 0);\n            checkedConversations.push(nextProps.currentConversationId);\n        } else {\n            // const findA =(id)=> this.state.allMessages.filter((value)=>{\n            //     return value.id==id;\n            // });\n            // let obj = findA(nextProps.currentConversationId)[0];\n            // if(obj!=null) {\n            //     console.log(\"selected messages \",obj.id);\n            // }\n        }\n\n        if (nextProps.messages != this.props.messages) {\n            console.log(\"id \", this.props.currentConversationId, \" messsage\", nextProps.messages.message);\n            let temptAllMessage = this.state.allMessages;\n            // temptAllMessage.push(nextProps.messages);\n            temptAllMessage.set(this.props.currentConversationId, nextProps.messages.message)\n            this.setState({currentMessages: nextProps.messages.message});\n            this.setState({allMessages: temptAllMessage});\n        } else {\n\n        }\n        console.log(this.state.allMessages);\n    }\n\n    typeText = (event) => {\n        // let code = (event.keyCode ? event.keyCode : event.which);\n        if (event.keyCode === 13 && !event.shiftKey) {\n            let message = event.target.value;\n            let temptMessages = this.state.allMessages;\n            temptMessages.get(this.props.currentConversationId).push({\n                id: \"4\",\n                sender: 'Nam',\n                type: 'sent',\n                message: message\n            });\n            this.setState({allMessages: temptMessages});\n            typeCauseScroll = true;\n            pullCauseScroll = false;\n            // event.target.value = null;\n            //send message to service API\n            // this.props.websocket.send(message);\n            document.getElementById('textArea').value = \"\";\n        }\n    }\n\n\n    displayMessages = () => {\n        if (this.props.currentConversationId != null && this.state.allMessages.get(this.props.currentConversationId)!=null) {\n            // const messages = this.state.allMessages.get(this.props.currentConversationId).map((item) =>\n            //     <li className={item.type}>\n            //         <img src=\"http://emilcarlsson.se/assets/mikeross.png\" alt=\"\"/>\n            //         <p>{item.message}</p>\n            //     </li>\n            // );\n            // return messages;\n            var obj = this.state.allMessages.get(this.props.currentConversationId);\n            console.log('display ', obj.toString());\n            const messages = obj.map((item) =>\n                <li className={item.type}>\n                    <img src=\"http://emilcarlsson.se/assets/mikeross.png\" alt=\"\"/>\n                    <p>{item.message}</p>\n                </li>\n            );\n            return messages;\n        }\n    }\n\n    onMessageScroll = (event) => {\n        let messageBoard = document.getElementById('messages');\n        // console.log(e.scrollTop);\n        if (messageBoard.scrollTop === 1) {\n            alert(\"End\");\n            let messages = [\n                {\n                    id: \"1\",\n                    sender: 'Nam',\n                    type: 'sent',\n                    message: \"Nà ní\"\n                },\n                {\n                    id: \"2\",\n                    sender: 'BigBid',\n                    type: 'replies',\n                    message: \"nà ní 2\"\n                },\n                {\n                    id: \"3\",\n                    sender: 'Nam',\n                    type: 'sent',\n                    message: \"nà ní 2\"\n                }];\n            this.appendMessages(messages);\n            typeCauseScroll = false;\n            pullCauseScroll = true;\n            // messageBoard.scroll(0, 100);\n        }\n    }\n\n    appendMessages = (messages) => {\n        let temptMessages = messages.concat(this.state.messages);\n        // temptMessages.concat(this.state.messages);\n        // console.log(temptMessages);\n        this.setState({messages: temptMessages});\n        // this.state.\n        // console.log(this.state.messages);\n    }\n\n\n    render() {\n        return (\n            <Layout style={{borderLeft: \"1px solid #ebebe0\"}}>\n                <Header style={headerStyle}>\n                    <Avatar size={80} src={qoobee}/>\n                    <h3 style={ChatName}>Ms. QooBee</h3>\n                </Header>\n                <div className=\"messages\" onScroll={this.onMessageScroll} id=\"messages\">\n                    <ul>\n                        {this.displayMessages()}\n                    </ul>\n                </div>\n\n                <Footer style={footerStyle}>\n                    <div className=\"message-input\">\n                        <div className=\"wrap\">\n                            <form>\n                                <textarea id=\"textArea\" style={{backgroundColor: 'pink'}}\n                                          placeholder=\"Write your message... \" onKeyDown={this.typeText}></textarea>\n                            </form>\n                            <div className=\"tool\">\n                                <button className=\"submit\" onClick={this.typeText}><i className=\"fa fa-paper-plane\"\n                                                                                      style={{fontSize: '24px'}}></i>\n                                </button>\n                            </div>\n\n                        </div>\n                    </div>\n                </Footer>\n\n            </Layout>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        currentConversationId: state.chatReducer.conversationId,\n        websocket: state.socketReducer.websocket,\n        messages: state.chatReducer.messages,\n    }\n};\nconst mapDispatchToProps = (dispatch) => ({\n    getMessage: (conversationId, index) => dispatch(ChatActions.get_Message(conversationId, index)),\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Message);"]},"metadata":{},"sourceType":"module"}