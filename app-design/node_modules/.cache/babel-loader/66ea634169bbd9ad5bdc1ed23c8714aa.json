{"ast":null,"code":"import _classCallCheck from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/Conversations/Conversations.js\";\nimport React, { Component } from 'react';\nimport { Layout, Menu, Avatar } from 'antd';\nimport qoobee from \"../../images/qoobee.jpg\";\nimport '../../css/Conversations/conversation.css';\nimport { ChatActions } from \"../../Redux/Actions/ChatActions\";\nimport { connect } from 'react-redux';\n\nvar Conversations =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Conversations, _Component);\n\n  function Conversations(props) {\n    var _this;\n\n    _classCallCheck(this, Conversations);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Conversations).call(this, props));\n\n    _this.showMessage = function (chat) {\n      alert(chat.item.props);\n\n      _this.props.FetchChatId(chat.key);\n    };\n\n    _this.state = {\n      conversationsMap: []\n    };\n    return _this;\n  }\n\n  _createClass(Conversations, [{\n    key: \"showConversations\",\n    value: function showConversations() {\n      var menuItems = this.state.conversationsMap.map(function (item) {\n        return React.createElement(Menu.Item, {\n          key: item.conversationID,\n          style: {\n            height: '70px',\n            marginTop: '0'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, React.createElement(Avatar, {\n          size: 50,\n          src: qoobee,\n          style: {\n            margin: '10px 5px 10px 5px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          className: \"nav-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, item.conversationName), React.createElement(\"p\", {\n          className: \"preview\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, \"n\\xE0 n\\xEDn\\xE0 n\\xEDn\\xE0 n\\xEDn\\xE0 n\\xEDn\\xE0 n\\xEDn\\xE0 n\\xEDn\\xE0 n\\xED\"), React.createElement(\"div\", {\n          className: \"dot\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }));\n      });\n      return menuItems;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      //after get socket state\n      var phone = JSON.parse(localStorage.getItem('user')).phone;\n      var request = {\n        messageType: \"loadConversations\",\n        content: {\n          phone: phone\n        } // nextProps.websocket.send(JSON.stringify(request));\n        //load conversations\n\n      };\n\n      if (nextProps.conversationsList !== this.props.conversationsList) {\n        // console.log('conversationList ',nextProps.conversationsList)\n        this.setState({\n          conversationsMap: nextProps.conversationsList\n        });\n      } //created conversation\n\n\n      if (nextProps.createdConversation !== this.props.createdConversation) {\n        console.log('createdConversation ', nextProps.createdConversation);\n        var temptObj = this.state.conversationsMap;\n        temptObj.push(nextProps.createdConversation);\n        this.setState({\n          conversationsMap: temptObj\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, {\n        style: {\n          height: '100%',\n          width: '100%',\n          display: this.props.conversationDisplay,\n          overflow: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"conversations\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Menu, {\n        theme: \"light\",\n        mode: \"inline\",\n        onClick: this.showMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, this.showConversations())));\n    }\n  }]);\n\n  return Conversations;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    websocket: state.socketReducer.websocket,\n    conversationsList: state.socketReducer.conversationList,\n    createdConversation: state.socketReducer.createdConversation\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    FetchChatId: function FetchChatId(conversationId) {\n      return dispatch(ChatActions.fetch_ConversationID(conversationId));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Conversations);","map":{"version":3,"sources":["/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/Conversations/Conversations.js"],"names":["React","Component","Layout","Menu","Avatar","qoobee","ChatActions","connect","Conversations","props","showMessage","chat","alert","item","FetchChatId","key","state","conversationsMap","menuItems","map","conversationID","height","marginTop","margin","conversationName","nextProps","nextContext","phone","JSON","parse","localStorage","getItem","request","messageType","content","conversationsList","setState","createdConversation","console","log","temptObj","push","width","display","conversationDisplay","overflow","showConversations","mapStateToProps","websocket","socketReducer","conversationList","mapDispatchToProps","dispatch","conversationId","fetch_ConversationID"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Layout, Menu, Avatar} from 'antd';\nimport qoobee from \"../../images/qoobee.jpg\";\nimport '../../css/Conversations/conversation.css';\nimport {ChatActions} from \"../../Redux/Actions/ChatActions\";\nimport { connect } from 'react-redux';\n\nclass Conversations extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            conversationsMap:[]\n        }\n    }\n\n    showMessage=(chat)=>{\n        alert(chat.item.props);\n      this.props.FetchChatId(chat.key);\n    };\n\n    showConversations(){\n        const menuItems = this.state.conversationsMap.map((item)=>\n            <Menu.Item key={item.conversationID} style={{height:'70px',marginTop:'0' }} >\n                <Avatar  size={50} src={qoobee} style={{margin:'10px 5px 10px 5px'}}/>\n                <p className=\"nav-text\">{item.conversationName}</p>\n                <p className=\"preview\">nà nínà nínà nínà nínà nínà nínà ní</p>\n                <div className=\"dot\"></div>\n            </Menu.Item>\n        );\n        return menuItems;\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        //after get socket state\n        let phone = JSON.parse(localStorage.getItem('user')).phone;\n        let request =  {\n            messageType: \"loadConversations\",\n            content:{\n                phone: phone,\n            }\n        }\n        // nextProps.websocket.send(JSON.stringify(request));\n\n        //load conversations\n        if(nextProps.conversationsList !== this.props.conversationsList){\n            // console.log('conversationList ',nextProps.conversationsList)\n            this.setState({conversationsMap:nextProps.conversationsList})\n        }\n\n        //created conversation\n        if(nextProps.createdConversation !== this.props.createdConversation){\n            console.log('createdConversation ',nextProps.createdConversation)\n            let temptObj = this.state.conversationsMap;\n            temptObj.push(nextProps.createdConversation);\n            this.setState({conversationsMap:temptObj})\n        }\n    }\n\n    render() {\n        return (\n                <Layout style={{\n                     height: '100%',width:'100%', display:this.props.conversationDisplay, overflow: 'auto'\n                }}\n                >\n                    <div  id=\"conversations\">\n                        <Menu theme=\"light\" mode=\"inline\"  onClick={this.showMessage}>\n                            {this.showConversations()}\n                        </Menu>\n                    </div>\n                </Layout>\n        );\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        websocket: state.socketReducer.websocket,\n        conversationsList:state.socketReducer.conversationList,\n        createdConversation: state.socketReducer.createdConversation,\n    }\n}\nconst mapDispatchToProps = (dispatch) => ({\n    FetchChatId: (conversationId) => dispatch(ChatActions.fetch_ConversationID(conversationId)),\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Conversations);"]},"metadata":{},"sourceType":"module"}