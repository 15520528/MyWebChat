{"ast":null,"code":"import _classCallCheck from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/Messages/Message.js\";\nimport React, { Component } from 'react';\nimport { Avatar, Layout } from 'antd';\nimport qoobee from \"../../images/qoobee.jpg\";\nimport '../../css/Messages/messages.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport connect from \"react-redux/es/connect/connect\";\nimport { ChatActions } from '../../Redux/Actions/ChatActions';\nimport { ChatService } from '../../Services/ChatService';\nvar Header = Layout.Header,\n    Footer = Layout.Footer;\nvar headerStyle = {\n  height: '100px',\n  backgroundColor: 'white',\n  borderBottom: '1px solid #ebebe0 ',\n  padding: '10px'\n};\nvar footerStyle = {\n  height: '80px',\n  backgroundColor: 'white',\n  borderTop: '1px solid #ebebe0 ',\n  padding: '0px'\n};\nvar ChatName = {\n  marginTop: '-70px',\n  marginLeft: '85px'\n};\nvar typeCauseScroll = false;\nvar pullCauseScroll = false;\nvar changeMessageCauseScroll = false;\nvar checkedConversations = [];\nvar ownerId = JSON.parse(localStorage.getItem('user')).phone;\nvar ownerName = JSON.parse(localStorage.getItem('user')).userName;\n\nvar Message =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Message, _Component);\n\n  function Message(props) {\n    var _this;\n\n    _classCallCheck(this, Message);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Message).call(this, props));\n\n    _this.typeText = function (event) {\n      // let code = (event.keyCode ? event.keyCode : event.which);\n      if (event.keyCode === 13 && !event.shiftKey) {\n        var message = event.target.value; // let temptMessages = this.state.allMessages;\n        // temptMessages.get(this.props.currentConversationId).push({\n        //     sender: ownerId,\n        //     senderName: ownerName,\n        //     content: message\n        // });\n        // this.setState({allMessages: temptMessages});\n\n        typeCauseScroll = true;\n        pullCauseScroll = false; //send message to service API\n\n        var messageToServer = {\n          messageType: 'sendMessage',\n          content: {\n            sender: ownerId,\n            content: message,\n            conversationID: _this.props.currentConversationId\n          }\n        };\n\n        _this.props.websocket.send(JSON.stringify(messageToServer));\n\n        document.getElementById('textArea').value = \"\";\n      }\n    };\n\n    _this.displayMessages = function () {\n      if (_this.props.currentConversationId != null && _this.state.allMessages.get(_this.props.currentConversationId) != null) {\n        var obj = _this.state.allMessages.get(_this.props.currentConversationId); // this.state.currentConversationName\n\n\n        console.log('display ', obj.length);\n\n        if (obj.length > 0) {\n          var messages = obj.map(function (item) {\n            return React.createElement(\"li\", {\n              className: item.senderID == ownerId ? 'sent' : 'replies',\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 166\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              className: \"sender\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 168\n              },\n              __self: this\n            }, item.senderName), React.createElement(\"p\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 169\n              },\n              __self: this\n            }, item.content), React.createElement(\"span\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 170\n              },\n              __self: this\n            }, '14:04'));\n          });\n          return messages;\n        }\n      }\n    };\n\n    _this.onMessageScroll = function (event) {\n      var messageBoard = document.getElementById('messages');\n\n      if (messageBoard.scrollTop === 0 && _this.state.allMessages.get(_this.props.currentConversationId) != null) {\n        _this.props.getMessage(_this.props.currentConversationId);\n\n        console.log(\"End\");\n        var messages = [{\n          id: \"1\",\n          sender: 'Nam',\n          type: 'sent',\n          message: \"Nà ní\"\n        }, {\n          id: \"2\",\n          sender: 'BigBid',\n          type: 'replies',\n          message: \"nà ní 2\"\n        }, {\n          id: \"3\",\n          sender: 'Nam',\n          type: 'sent',\n          message: \"nà ní 2\"\n        }];\n\n        _this.appendMessages(messages);\n\n        typeCauseScroll = false;\n        pullCauseScroll = true;\n      }\n    };\n\n    _this.appendMessages = function (messages) {\n      var temptMessages = messages.concat(_this.state.messages); // temptMessages.concat(this.state.messages);\n      // console.log(temptMessages);\n      // this.setState({messages: temptMessages});\n      // this.state.\n      // console.log(this.state.messages);\n    };\n\n    _this.state = {\n      currentConversationName: '',\n      websocket: '',\n      allMessages: new Map()\n    };\n    return _this;\n  }\n\n  _createClass(Message, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (typeCauseScroll) {\n        // console.log(prevState.messages);\n        var messageBoard = document.getElementById('messages');\n        messageBoard.scroll(0, messageBoard.scrollHeight);\n        typeCauseScroll = false;\n        pullCauseScroll = false;\n        changeMessageCauseScroll = false;\n      } else if (pullCauseScroll) {\n        // console.log(prevState.messages);\n        var _messageBoard = document.getElementById('messages');\n\n        _messageBoard.scroll(0, 20);\n\n        typeCauseScroll = false;\n        pullCauseScroll = false;\n        changeMessageCauseScroll = false;\n      } else if (changeMessageCauseScroll) {\n        var _messageBoard2 = document.getElementById('messages');\n\n        _messageBoard2.scroll(0, _messageBoard2.scrollHeight);\n\n        changeMessageCauseScroll = false;\n        typeCauseScroll = false;\n        pullCauseScroll = false;\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      var _this2 = this;\n\n      if (nextProps.currentConversationId !== this.props.currentConversationId && !checkedConversations.includes(nextProps.currentConversationId)) {\n        console.log(\"selected chatId \", nextProps.currentConversationId); // this.props.getMessage(nextProps.currentConversationId, 0);\n\n        ChatService.getMessages(nextProps.currentConversationId).then(function (messages) {\n          console.log('message ', messages);\n          var temptAllMessage = _this2.state.allMessages;\n          var message1 = [];\n\n          if (messages != null) {\n            temptAllMessage.set(nextProps.currentConversationId, messages);\n          } else {\n            temptAllMessage.set(nextProps.currentConversationId, message1);\n          }\n\n          changeMessageCauseScroll = true;\n\n          _this2.setState({\n            allMessages: temptAllMessage\n          });\n\n          checkedConversations.push(nextProps.currentConversationId);\n          console.log(_this2.state.allMessages);\n        }).catch(function (error) {});\n      } else {\n        changeMessageCauseScroll = true;\n        console.log('scroll to get messsage');\n      }\n\n      if (nextProps.socketMessage != null) {\n        console.log('socket message ', nextProps.socketMessage);\n        var message = nextProps.socketMessage;\n        var temptAllMessage = this.state.allMessages;\n        var conversationID = message.conversationID;\n        temptAllMessage.get(conversationID).push({\n          senderID: message.senderID,\n          senderName: message.senderName,\n          content: message.content\n        });\n        this.setState({\n          allMessages: temptAllMessage\n        });\n      } // if (nextProps.messages !== this.props.messages) {\n      //     console.log(isScrolling);\n      //     if(!isScrolling) {\n      //         console.log(\"id \", this.props.currentConversationId, \" messsage\", nextProps.messages.message);\n      //         let temptAllMessage = this.state.allMessages;\n      //         // temptAllMessage.push(nextProps.messages);\n      //         temptAllMessage.set(this.props.currentConversationId, nextProps.messages.message)\n      //         this.setState({currentMessages: nextProps.messages.message});\n      //         this.setState({allMessages: temptAllMessage});\n      //         // changeMessageCauseScroll = true;\n      //         isScrolling = false;\n      //     }\n      //     else{\n      //     }\n      // }\n\n\n      console.log(this.state.allMessages);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, {\n        style: {\n          borderLeft: \"1px solid #ebebe0\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(Header, {\n        style: headerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(Avatar, {\n        size: 80,\n        src: qoobee,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        style: ChatName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, this.state.currentConversationName)), React.createElement(\"div\", {\n        className: \"messages\",\n        onScroll: this.onMessageScroll,\n        id: \"messages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, this.displayMessages())), React.createElement(Footer, {\n        style: footerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"message-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        id: \"textArea\",\n        style: {\n          backgroundColor: 'white'\n        },\n        placeholder: \"Write your message... \",\n        onKeyDown: this.typeText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"tool\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"submit\",\n        onClick: this.typeText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-paper-plane\",\n        style: {\n          fontSize: '24px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      })))))));\n    }\n  }]);\n\n  return Message;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log();\n  return {\n    currentConversationId: state.chatReducer.conversationId,\n    websocket: state.socketReducer.websocket,\n    messages: state.chatReducer.messages,\n    socketMessage: state.socketReducer.socketMessage\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getMessage: function getMessage(conversationId, index) {\n      return dispatch(ChatActions.get_Message(conversationId, index));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Message);","map":{"version":3,"sources":["/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/Messages/Message.js"],"names":["React","Component","Avatar","Layout","qoobee","connect","ChatActions","ChatService","Header","Footer","headerStyle","height","backgroundColor","borderBottom","padding","footerStyle","borderTop","ChatName","marginTop","marginLeft","typeCauseScroll","pullCauseScroll","changeMessageCauseScroll","checkedConversations","ownerId","JSON","parse","localStorage","getItem","phone","ownerName","userName","Message","props","typeText","event","keyCode","shiftKey","message","target","value","messageToServer","messageType","content","sender","conversationID","currentConversationId","websocket","send","stringify","document","getElementById","displayMessages","state","allMessages","get","obj","console","log","length","messages","map","item","senderID","senderName","onMessageScroll","messageBoard","scrollTop","getMessage","id","type","appendMessages","temptMessages","concat","currentConversationName","Map","prevProps","prevState","snapshot","scroll","scrollHeight","nextProps","nextContext","includes","getMessages","then","temptAllMessage","message1","set","setState","push","catch","error","socketMessage","borderLeft","fontSize","mapStateToProps","chatReducer","conversationId","socketReducer","mapDispatchToProps","dispatch","index","get_Message"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Avatar, Layout} from 'antd';\nimport qoobee from \"../../images/qoobee.jpg\";\nimport '../../css/Messages/messages.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport connect from \"react-redux/es/connect/connect\";\nimport {ChatActions} from '../../Redux/Actions/ChatActions';\nimport {ChatService} from '../../Services/ChatService';\nconst {\n    Header, Footer,\n} = Layout;\n\nconst headerStyle = {\n    height: '100px', backgroundColor: 'white', borderBottom: '1px solid #ebebe0 ', padding: '10px'\n}\n\nconst footerStyle = {\n    height: '80px', backgroundColor: 'white', borderTop: '1px solid #ebebe0 ', padding: '0px'\n}\n\nconst ChatName = {\n    marginTop: '-70px', marginLeft: '85px'\n}\n\nvar typeCauseScroll = false\nvar pullCauseScroll = false\nvar changeMessageCauseScroll = false;\n\nvar checkedConversations = [];\nvar ownerId = JSON.parse(localStorage.getItem('user')).phone;\nvar ownerName = JSON.parse(localStorage.getItem('user')).userName;\nclass Message extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentConversationName:'',\n            websocket: '',\n            allMessages: new Map(),\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (typeCauseScroll) {\n            // console.log(prevState.messages);\n            let messageBoard = document.getElementById('messages');\n            messageBoard.scroll(0, messageBoard.scrollHeight);\n            typeCauseScroll = false;\n            pullCauseScroll = false;\n            changeMessageCauseScroll = false;\n        } else if (pullCauseScroll) {\n            // console.log(prevState.messages);\n            let messageBoard = document.getElementById('messages');\n            messageBoard.scroll(0, 20);\n            typeCauseScroll = false;\n            pullCauseScroll = false;\n            changeMessageCauseScroll = false;\n        }else if(changeMessageCauseScroll){\n            let messageBoard = document.getElementById('messages');\n            messageBoard.scroll(0, messageBoard.scrollHeight);\n            changeMessageCauseScroll = false;\n            typeCauseScroll = false;\n            pullCauseScroll = false;\n        }\n\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.currentConversationId !== this.props.currentConversationId\n            && !checkedConversations.includes(nextProps.currentConversationId)\n        ) {\n            console.log(\"selected chatId \", nextProps.currentConversationId);\n            // this.props.getMessage(nextProps.currentConversationId, 0);\n            ChatService.getMessages(nextProps.currentConversationId)\n                .then(messages => {\n                    console.log('message ', messages);\n                    let temptAllMessage = this.state.allMessages;\n                    let message1= [];\n\n                    if(messages !=null) {\n                        temptAllMessage.set(nextProps.currentConversationId,messages)\n                    }\n                    else{\n                        temptAllMessage.set(nextProps.currentConversationId,message1)\n                    }\n                    changeMessageCauseScroll = true;\n                    this.setState({allMessages: temptAllMessage});\n                    checkedConversations.push(nextProps.currentConversationId);\n                    console.log(this.state.allMessages);\n\n                })\n                .catch(error => {\n\n                });\n\n        } else {\n                changeMessageCauseScroll = true;\n                console.log('scroll to get messsage')\n        }\n        if(nextProps.socketMessage != null){\n            console.log('socket message ', nextProps.socketMessage);\n            let message = nextProps.socketMessage;\n            let temptAllMessage = this.state.allMessages;\n            let conversationID = message.conversationID;\n            temptAllMessage.get(conversationID).push({\n                senderID: message.senderID,\n                senderName: message.senderName,\n                content: message.content\n            });\n            this.setState({allMessages: temptAllMessage});\n        }\n\n        // if (nextProps.messages !== this.props.messages) {\n        //     console.log(isScrolling);\n        //     if(!isScrolling) {\n        //         console.log(\"id \", this.props.currentConversationId, \" messsage\", nextProps.messages.message);\n        //         let temptAllMessage = this.state.allMessages;\n        //         // temptAllMessage.push(nextProps.messages);\n        //         temptAllMessage.set(this.props.currentConversationId, nextProps.messages.message)\n        //         this.setState({currentMessages: nextProps.messages.message});\n        //         this.setState({allMessages: temptAllMessage});\n        //         // changeMessageCauseScroll = true;\n        //         isScrolling = false;\n        //     }\n        //     else{\n        //     }\n        // }\n        console.log(this.state.allMessages)\n    }\n\n    typeText = (event) => {\n        // let code = (event.keyCode ? event.keyCode : event.which);\n        if (event.keyCode === 13 && !event.shiftKey) {\n            let message = event.target.value;\n            // let temptMessages = this.state.allMessages;\n            // temptMessages.get(this.props.currentConversationId).push({\n            //     sender: ownerId,\n            //     senderName: ownerName,\n            //     content: message\n            // });\n            // this.setState({allMessages: temptMessages});\n            typeCauseScroll = true;\n            pullCauseScroll = false;\n            //send message to service API\n            let messageToServer = {\n                messageType: 'sendMessage',\n                content: {\n                    sender: ownerId,\n                    content: message,\n                    conversationID: this.props.currentConversationId\n                }\n            }\n            this.props.websocket.send(JSON.stringify(messageToServer));\n            document.getElementById('textArea').value = \"\";\n        }\n    }\n\n\n    displayMessages = () => {\n        if (this.props.currentConversationId != null && this.state.allMessages.get(this.props.currentConversationId)!=null) {\n            var obj = this.state.allMessages.get(this.props.currentConversationId);\n            // this.state.currentConversationName\n            console.log('display ', obj.length);\n            if(obj.length>0) {\n                const messages = obj.map((item) =>\n                    <li className={item.senderID==ownerId?'sent':'replies'}>\n                        {/*<img src=\"http://emilcarlsson.se/assets/mikeross.png\" alt=\"\"/>*/}\n                        <div className=\"sender\">{item.senderName}</div>\n                        <p>{item.content}</p>\n                        <span >{'14:04'}</span>\n                    </li>\n                );\n                return messages;\n            }\n        }\n    }\n\n    onMessageScroll = (event) => {\n\n        let messageBoard = document.getElementById('messages');\n        if (messageBoard.scrollTop === 0&& this.state.allMessages.get(this.props.currentConversationId)!=null) {\n            this.props.getMessage(this.props.currentConversationId);\n            console.log(\"End\");\n            let messages = [\n                {\n                    id: \"1\",\n                    sender: 'Nam',\n                    type: 'sent',\n                    message: \"Nà ní\"\n                },\n                {\n                    id: \"2\",\n                    sender: 'BigBid',\n                    type: 'replies',\n                    message: \"nà ní 2\"\n                },\n                {\n                    id: \"3\",\n                    sender: 'Nam',\n                    type: 'sent',\n                    message: \"nà ní 2\"\n                }];\n            this.appendMessages(messages);\n            typeCauseScroll = false;\n            pullCauseScroll = true;\n        }\n\n    }\n\n    appendMessages = (messages) => {\n        let temptMessages = messages.concat(this.state.messages);\n        // temptMessages.concat(this.state.messages);\n        // console.log(temptMessages);\n        // this.setState({messages: temptMessages});\n        // this.state.\n        // console.log(this.state.messages);\n    }\n\n\n    render() {\n        return (\n            <Layout style={{borderLeft: \"1px solid #ebebe0\"}}>\n                <Header style={headerStyle}>\n                    <Avatar size={80} src={qoobee}/>\n                    <h3 style={ChatName}>{this.state.currentConversationName}</h3>\n                </Header>\n                <div className=\"messages\" onScroll={this.onMessageScroll} id=\"messages\">\n                    <ul >\n                        {this.displayMessages()}\n                    </ul>\n                </div>\n\n                <Footer style={footerStyle}>\n                    <div className=\"message-input\">\n                        <div className=\"wrap\">\n                            <form>\n                                <textarea id=\"textArea\" style={{backgroundColor: 'white'}}\n                                          placeholder=\"Write your message... \" onKeyDown={this.typeText}></textarea>\n                            </form>\n                            <div className=\"tool\">\n                                <button className=\"submit\" onClick={this.typeText}><i className=\"fa fa-paper-plane\"\n                                                                                      style={{fontSize: '24px'}}></i>\n                                </button>\n                            </div>\n\n                        </div>\n                    </div>\n                </Footer>\n\n            </Layout>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n            console.log()\n    return {\n        currentConversationId: state.chatReducer.conversationId,\n        websocket: state.socketReducer.websocket,\n        messages: state.chatReducer.messages,\n        socketMessage:state.socketReducer.socketMessage,\n    }\n};\nconst mapDispatchToProps = (dispatch) => ({\n    getMessage: (conversationId, index) => dispatch(ChatActions.get_Message(conversationId, index)),\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Message);"]},"metadata":{},"sourceType":"module"}