{"ast":null,"code":"import _classCallCheck from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/HomePages/ChatPage.js\";\nimport React, { Component } from 'react';\nimport Side from '../Side/Side';\nimport Messages from \"../Messages/Messages\";\nimport { Layout } from 'antd';\nimport { SocketActions } from \"../../Redux/Actions/SocketActions\";\nimport connect from \"react-redux/es/connect/connect\";\n\nvar ChatPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatPage, _Component);\n\n  function ChatPage() {\n    _classCallCheck(this, ChatPage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ChatPage).apply(this, arguments));\n  }\n\n  _createClass(ChatPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      var ws = new WebSocket('ws://localhost:6898/websocket');\n\n      ws.onopen = function () {\n        //after established socket successfully\n        _this.props.FetchSocket(ws); //client send first request to update online and server send back a conversationsList which client's joined\n\n\n        var userID = JSON.parse(localStorage.getItem('user')).phone;\n        console.log(userID);\n        var firstRequest = {\n          messageType: \"firstRequest\",\n          content: {\n            userID: userID\n          }\n        };\n        ws.send(JSON.stringify(firstRequest));\n        var conversationList = [{\n          conversationID: \"1\",\n          conversationName: \"Tâm sự với em 1\"\n        }, {\n          conversationID: \"3\",\n          conversationName: \"Hội yêu cún\"\n        }, {\n          conversationID: \"8\",\n          conversationName: \"Hội yêu mèo\"\n        }, {\n          conversationID: \"11\",\n          conversationName: \"Bộ tộc Golden\"\n        }];\n\n        _this.props.FetConversationList(conversationList); //\n        // let createdConversation = {\n        //     conversationID:'123',\n        //     conversationName:'nam va nhung nguoi ban'\n        // }\n        // this.props.FetchCreatedConversation(createdConversation);\n\n      };\n\n      ws.onerror = function (error) {\n        console.log('WebSocket Error ' + error);\n      };\n\n      ws.onmessage = function (e) {\n        console.log('Server nà n: ' + e.data);\n        var data = JSON.parse(e.data); //if createdConversation type -> this.props.FetchCreatedConversation(e.data);\n\n        if (data.messageType === 'createConversation') {\n          var createdConversation = {\n            conversationID: data.content.conversationID,\n            conversationName: data.content.conversationName\n          };\n\n          _this.props.FetchCreatedConversation(createdConversation);\n        } //if loadconversations type -> this.props.FetConversationList(e.data);\n        //if message type -> this.props.FetchMessage();\n\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(Side, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), React.createElement(Messages, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChatPage;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    FetchSocket: function FetchSocket(socket) {\n      return dispatch(SocketActions.fetch_socket(socket));\n    },\n    FetchMessage: function FetchMessage(message) {\n      return dispatch(SocketActions.fetch_message(message));\n    },\n    FetchCreatedConversation: function FetchCreatedConversation(createdConversation) {\n      return dispatch(SocketActions.fetch_createdConversation(createdConversation));\n    },\n    FetConversationList: function FetConversationList(conversationList) {\n      return dispatch(SocketActions.fetch_ConversationList(conversationList));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatPage);","map":{"version":3,"sources":["/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/HomePages/ChatPage.js"],"names":["React","Component","Side","Messages","Layout","SocketActions","connect","ChatPage","ws","WebSocket","onopen","props","FetchSocket","userID","JSON","parse","localStorage","getItem","phone","console","log","firstRequest","messageType","content","send","stringify","conversationList","conversationID","conversationName","FetConversationList","onerror","error","onmessage","e","data","createdConversation","FetchCreatedConversation","mapStateToProps","state","mapDispatchToProps","dispatch","socket","fetch_socket","FetchMessage","message","fetch_message","fetch_createdConversation","fetch_ConversationList"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Side from '../Side/Side';\nimport Messages from \"../Messages/Messages\";\nimport {\n    Layout\n} from 'antd';\nimport {SocketActions} from \"../../Redux/Actions/SocketActions\";\nimport connect from \"react-redux/es/connect/connect\";\n\n\nclass ChatPage extends Component {\n    componentDidMount() {\n        var ws = new WebSocket('ws://localhost:6898/websocket');\n\n        ws.onopen = () => {\n            //after established socket successfully\n            this.props.FetchSocket(ws);\n\n            //client send first request to update online and server send back a conversationsList which client's joined\n            let userID = JSON.parse(localStorage.getItem('user')).phone;\n            console.log(userID)\n            let firstRequest = {\n                messageType: \"firstRequest\",\n                content: {\n                    userID: userID\n                }\n            }\n\n            ws.send(JSON.stringify(firstRequest));\n\n            let conversationList = [\n                {\n                    conversationID: \"1\",\n                    conversationName: \"Tâm sự với em 1\"\n                },\n                {\n                    conversationID: \"3\",\n                    conversationName: \"Hội yêu cún\"\n                },\n                {\n                    conversationID: \"8\",\n                    conversationName: \"Hội yêu mèo\"\n                },\n                {\n                    conversationID: \"11\",\n                    conversationName: \"Bộ tộc Golden\"\n                },\n            ];\n            this.props.FetConversationList(conversationList);\n            //\n            // let createdConversation = {\n            //     conversationID:'123',\n            //     conversationName:'nam va nhung nguoi ban'\n            // }\n            // this.props.FetchCreatedConversation(createdConversation);\n        };\n        ws.onerror = function (error) {\n            console.log('WebSocket Error ' + error);\n        };\n        ws.onmessage = (e) => {\n            console.log('Server nà n: ' + e.data);\n            let data = JSON.parse(e.data);\n            //if createdConversation type -> this.props.FetchCreatedConversation(e.data);\n            if (data.messageType === 'createConversation') {\n                let createdConversation = {\n                    conversationID: data.content.conversationID,\n                    conversationName: data.content.conversationName\n                }\n                this.props.FetchCreatedConversation(createdConversation);\n            }\n\n            //if loadconversations type -> this.props.FetConversationList(e.data);\n\n            //if message type -> this.props.FetchMessage();\n\n        };\n    }\n\n    render() {\n        return (\n            <Layout>\n                <Side/>\n                <Messages/>\n            </Layout>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {}\n}\nconst mapDispatchToProps = (dispatch) => ({\n    FetchSocket: (socket) => dispatch(SocketActions.fetch_socket(socket)),\n    FetchMessage: (message) => dispatch(SocketActions.fetch_message(message)),\n    FetchCreatedConversation: (createdConversation) => dispatch(SocketActions.fetch_createdConversation(createdConversation)),\n    FetConversationList: (conversationList) => dispatch(SocketActions.fetch_ConversationList(conversationList)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(ChatPage);"]},"metadata":{},"sourceType":"module"}