{"ast":null,"code":"import _classCallCheck from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/HomePages/ChatPage.js\";\nimport React, { Component } from 'react';\nimport Side from '../Side/Side';\nimport Messages from \"../Messages/Messages\";\nimport { Layout } from 'antd';\nimport { SocketActions } from \"../../Redux/Actions/SocketActions\";\nimport connect from \"react-redux/es/connect/connect\";\n\nvar ChatPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatPage, _Component);\n\n  function ChatPage() {\n    _classCallCheck(this, ChatPage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ChatPage).apply(this, arguments));\n  }\n\n  _createClass(ChatPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      var ws = new WebSocket('ws://localhost:6898/websocket');\n\n      ws.onopen = function () {\n        //after established socket successfully\n        _this.props.FetchSocket(ws); //client send first request to update online and server send back a conversationsList which client's joined\n\n\n        var userID = JSON.parse(localStorage.getItem('user')).phone;\n        var firstRequest = {\n          messageType: \"firstRequest\",\n          content: {\n            userID: userID\n          }\n        };\n        ws.send(JSON.stringify(firstRequest));\n        var conversationList = [{\n          conversationID: \"1\",\n          conversationName: \"Tâm sự với em 1\"\n        }, {\n          conversationID: \"3\",\n          conversationName: \"Hội yêu cún\"\n        }, {\n          conversationID: \"8\",\n          conversationName: \"Hội yêu mèo\"\n        }, {\n          conversationID: \"11\",\n          conversationName: \"Bộ tộc Golden\"\n        }]; // this.props.FetConversationList(conversationList);\n        //\n        // let createdConversation = {\n        //     conversationID:'123',\n        //     conversationName:'nam va nhung nguoi ban'\n        // }\n        // this.props.FetchCreatedConversation(createdConversation);\n      };\n\n      ws.onerror = function (error) {\n        console.log('WebSocket Error ' + error);\n      };\n\n      ws.onmessage = function (e) {\n        console.log('Server nà ní: ' + e.data);\n        var data = JSON.parse(e.data); //if createdConversation type -> this.props.FetchCreatedConversation(e.data);\n\n        if (data.messageType === 'createConversation') {\n          var createdConversation = {\n            conversationID: data.content.conversationID,\n            conversationName: data.content.conversationName\n          };\n\n          _this.props.FetchCreatedConversation(createdConversation);\n        } //if loadconversations type -> this.props.FetConversationList(e.data);\n\n\n        if (data.messageType === 'loadAllConversationsForUser') {\n          var conversationList = data.content;\n\n          _this.props.FetConversationList(conversationList);\n        } //if message type -> this.props.FetchMessage();\n\n\n        if (data.messageType === 'sendMessage') {\n          var message = data.content;\n\n          _this.props.FetchMessage(message);\n        }\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"/*\", React.createElement(Side, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(Messages, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), \"*/\");\n    }\n  }]);\n\n  return ChatPage;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    FetchSocket: function FetchSocket(socket) {\n      return dispatch(SocketActions.fetch_socket(socket));\n    },\n    FetchMessage: function FetchMessage(message) {\n      return dispatch(SocketActions.fetch_message(message));\n    },\n    FetchCreatedConversation: function FetchCreatedConversation(createdConversation) {\n      return dispatch(SocketActions.fetch_createdConversation(createdConversation));\n    },\n    FetConversationList: function FetConversationList(conversationList) {\n      return dispatch(SocketActions.fetch_ConversationList(conversationList));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatPage);","map":{"version":3,"sources":["/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/HomePages/ChatPage.js"],"names":["React","Component","Side","Messages","Layout","SocketActions","connect","ChatPage","ws","WebSocket","onopen","props","FetchSocket","userID","JSON","parse","localStorage","getItem","phone","firstRequest","messageType","content","send","stringify","conversationList","conversationID","conversationName","onerror","error","console","log","onmessage","e","data","createdConversation","FetchCreatedConversation","FetConversationList","message","FetchMessage","mapStateToProps","state","mapDispatchToProps","dispatch","socket","fetch_socket","fetch_message","fetch_createdConversation","fetch_ConversationList"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Side from '../Side/Side';\nimport Messages from \"../Messages/Messages\";\nimport {\n    Layout\n} from 'antd';\nimport {SocketActions} from \"../../Redux/Actions/SocketActions\";\nimport connect from \"react-redux/es/connect/connect\";\n\n\nclass ChatPage extends Component {\n    componentDidMount() {\n        var ws = new WebSocket('ws://localhost:6898/websocket');\n\n        ws.onopen = () => {\n            //after established socket successfully\n            this.props.FetchSocket(ws);\n\n            //client send first request to update online and server send back a conversationsList which client's joined\n            let userID = JSON.parse(localStorage.getItem('user')).phone;\n            let firstRequest = {\n                messageType: \"firstRequest\",\n                content: {\n                    userID: userID\n                }\n            }\n\n            ws.send(JSON.stringify(firstRequest));\n\n            let conversationList = [\n                {\n                    conversationID: \"1\",\n                    conversationName: \"Tâm sự với em 1\"\n                },\n                {\n                    conversationID: \"3\",\n                    conversationName: \"Hội yêu cún\"\n                },\n                {\n                    conversationID: \"8\",\n                    conversationName: \"Hội yêu mèo\"\n                },\n                {\n                    conversationID: \"11\",\n                    conversationName: \"Bộ tộc Golden\"\n                },\n            ];\n            // this.props.FetConversationList(conversationList);\n            //\n            // let createdConversation = {\n            //     conversationID:'123',\n            //     conversationName:'nam va nhung nguoi ban'\n            // }\n            // this.props.FetchCreatedConversation(createdConversation);\n        };\n        ws.onerror = function (error) {\n            console.log('WebSocket Error ' + error);\n        };\n        ws.onmessage = (e) => {\n            console.log('Server nà ní: ' + e.data);\n            let data = JSON.parse(e.data);\n            //if createdConversation type -> this.props.FetchCreatedConversation(e.data);\n            if (data.messageType === 'createConversation') {\n                let createdConversation = {\n                    conversationID: data.content.conversationID,\n                    conversationName: data.content.conversationName\n                }\n                this.props.FetchCreatedConversation(createdConversation);\n            }\n\n            //if loadconversations type -> this.props.FetConversationList(e.data);\n            if(data.messageType === 'loadAllConversationsForUser' ){\n                let conversationList = data.content;\n                this.props.FetConversationList(conversationList);\n            }\n            //if message type -> this.props.FetchMessage();\n            if(data.messageType === 'sendMessage'){\n                let message = data.content;\n                this.props.FetchMessage(message);\n            }\n\n        };\n    }\n\n    render() {\n        return (\n            <Layout>\n                /*<Side/>\n                <Messages/>*/\n            </Layout>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {}\n}\nconst mapDispatchToProps = (dispatch) => ({\n    FetchSocket: (socket) => dispatch(SocketActions.fetch_socket(socket)),\n    FetchMessage: (message) => dispatch(SocketActions.fetch_message(message)),\n    FetchCreatedConversation: (createdConversation) => dispatch(SocketActions.fetch_createdConversation(createdConversation)),\n    FetConversationList: (conversationList) => dispatch(SocketActions.fetch_ConversationList(conversationList)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(ChatPage);"]},"metadata":{},"sourceType":"module"}