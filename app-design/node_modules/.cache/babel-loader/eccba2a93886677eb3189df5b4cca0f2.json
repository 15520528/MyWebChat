{"ast":null,"code":"import _classCallCheck from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/Messages/Message.js\";\nimport React, { Component } from 'react';\nimport { Avatar, Layout } from 'antd';\nimport qoobee from \"../../images/qoobee.jpg\";\nimport '../../css/Messages/messages.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport connect from \"react-redux/es/connect/connect\";\nimport { ChatActions } from '../../Redux/Actions/ChatActions';\nimport { ChatService } from '../../Services/ChatService';\nvar Header = Layout.Header,\n    Footer = Layout.Footer;\nvar headerStyle = {\n  height: '100px',\n  backgroundColor: 'white',\n  borderBottom: '1px solid #ebebe0 ',\n  padding: '10px'\n};\nvar footerStyle = {\n  height: '80px',\n  backgroundColor: 'white',\n  borderTop: '1px solid #ebebe0 ',\n  padding: '0px'\n};\nvar ChatName = {\n  marginTop: '-70px',\n  marginLeft: '85px'\n};\nvar typeCauseScroll = false;\nvar pullCauseScroll = false;\nvar changeMessageCauseScroll = false;\nvar checkedConversations = [];\n\nvar Message =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Message, _Component);\n\n  function Message(props) {\n    var _this;\n\n    _classCallCheck(this, Message);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Message).call(this, props));\n\n    _this.typeText = function (event) {\n      // let code = (event.keyCode ? event.keyCode : event.which);\n      if (event.keyCode === 13 && !event.shiftKey) {\n        var message = event.target.value;\n        var temptMessages = _this.state.allMessages;\n        temptMessages.get(_this.props.currentConversationId).push({\n          id: \"4\",\n          sender: 'Nam',\n          type: 'sent',\n          message: message\n        });\n\n        _this.setState({\n          allMessages: temptMessages\n        });\n\n        typeCauseScroll = true;\n        pullCauseScroll = false; //send message to service API\n\n        _this.props.websocket.send(message);\n\n        document.getElementById('textArea').value = \"\";\n      }\n    };\n\n    _this.displayMessages = function () {\n      if (_this.props.currentConversationId != null && _this.state.allMessages.get(_this.props.currentConversationId) != null) {\n        var obj = _this.state.allMessages.get(_this.props.currentConversationId);\n\n        console.log('display ', obj);\n        var messages = obj.map(function (item) {\n          return React.createElement(\"li\", {\n            className: item.type,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            src: \"http://emilcarlsson.se/assets/mikeross.png\",\n            alt: \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139\n            },\n            __self: this\n          }), React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }, item.message));\n        });\n        return messages;\n      }\n    };\n\n    _this.onMessageScroll = function (event) {\n      var messageBoard = document.getElementById('messages');\n\n      if (messageBoard.scrollTop === 0 && _this.state.allMessages.get(_this.props.currentConversationId) != null) {\n        _this.props.getMessage(_this.props.currentConversationId);\n\n        console.log(\"End\");\n        var messages = [{\n          id: \"1\",\n          sender: 'Nam',\n          type: 'sent',\n          message: \"Nà ní\"\n        }, {\n          id: \"2\",\n          sender: 'BigBid',\n          type: 'replies',\n          message: \"nà ní 2\"\n        }, {\n          id: \"3\",\n          sender: 'Nam',\n          type: 'sent',\n          message: \"nà ní 2\"\n        }];\n\n        _this.appendMessages(messages);\n\n        typeCauseScroll = false;\n        pullCauseScroll = true;\n      }\n    };\n\n    _this.appendMessages = function (messages) {\n      var temptMessages = messages.concat(_this.state.messages); // temptMessages.concat(this.state.messages);\n      // console.log(temptMessages);\n      // this.setState({messages: temptMessages});\n      // this.state.\n      // console.log(this.state.messages);\n    };\n\n    _this.state = {\n      websocket: '',\n      allMessages: new Map()\n    };\n    return _this;\n  }\n\n  _createClass(Message, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (typeCauseScroll) {\n        // console.log(prevState.messages);\n        var messageBoard = document.getElementById('messages');\n        messageBoard.scroll(0, messageBoard.scrollHeight);\n        typeCauseScroll = false;\n        pullCauseScroll = false;\n        changeMessageCauseScroll = false;\n      } else if (pullCauseScroll) {\n        // console.log(prevState.messages);\n        var _messageBoard = document.getElementById('messages');\n\n        _messageBoard.scroll(0, 20);\n\n        typeCauseScroll = false;\n        pullCauseScroll = false;\n        changeMessageCauseScroll = false;\n      } else if (changeMessageCauseScroll) {\n        var _messageBoard2 = document.getElementById('messages');\n\n        _messageBoard2.scroll(0, _messageBoard2.scrollHeight);\n\n        changeMessageCauseScroll = false;\n        typeCauseScroll = false;\n        pullCauseScroll = false;\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      var _this2 = this;\n\n      if (nextProps.currentConversationId !== this.props.currentConversationId && !checkedConversations.includes(nextProps.currentConversationId)) {\n        console.log(\"selected chatId \", nextProps.currentConversationId); // this.props.getMessage(nextProps.currentConversationId, 0);\n\n        ChatService.getMessages(nextProps.currentConversationId).then(function (messages) {\n          console.log(messages);\n          var temptAllMessage = _this2.state.allMessages;\n          temptAllMessage.set(nextProps.currentConversationId, messages.message);\n          changeMessageCauseScroll = true;\n\n          _this2.setState({\n            allMessages: temptAllMessage\n          });\n\n          checkedConversations.push(nextProps.currentConversationId);\n          console.log(_this2.state.allMessages);\n        }).catch(function (error) {});\n      } else {\n        changeMessageCauseScroll = true;\n        console.log('scroll to get messsage');\n      }\n\n      if (nextProps.socketMessage != null) {\n        console.log('socket message ', nextProps.socketMessage);\n      } // if (nextProps.messages !== this.props.messages) {\n      //     console.log(isScrolling);\n      //     if(!isScrolling) {\n      //         console.log(\"id \", this.props.currentConversationId, \" messsage\", nextProps.messages.message);\n      //         let temptAllMessage = this.state.allMessages;\n      //         // temptAllMessage.push(nextProps.messages);\n      //         temptAllMessage.set(this.props.currentConversationId, nextProps.messages.message)\n      //         this.setState({currentMessages: nextProps.messages.message});\n      //         this.setState({allMessages: temptAllMessage});\n      //         // changeMessageCauseScroll = true;\n      //         isScrolling = false;\n      //     }\n      //     else{\n      //     }\n      // }\n\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, {\n        style: {\n          borderLeft: \"1px solid #ebebe0\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(Header, {\n        style: headerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(Avatar, {\n        size: 80,\n        src: qoobee,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        style: ChatName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"Ms. QooBee\")), React.createElement(\"div\", {\n        className: \"messages\",\n        onScroll: this.onMessageScroll,\n        id: \"messages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, this.displayMessages())), React.createElement(Footer, {\n        style: footerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"message-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        id: \"textArea\",\n        style: {\n          backgroundColor: 'white'\n        },\n        placeholder: \"Write your message... \",\n        onKeyDown: this.typeText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"tool\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"submit\",\n        onClick: this.typeText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-paper-plane\",\n        style: {\n          fontSize: '24px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      })))))));\n    }\n  }]);\n\n  return Message;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log();\n  return {\n    currentConversationId: state.chatReducer.conversationId,\n    websocket: state.socketReducer.websocket,\n    messages: state.chatReducer.messages,\n    socketMessage: state.socketReducer.socketMessage\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getMessage: function getMessage(conversationId, index) {\n      return dispatch(ChatActions.get_Message(conversationId, index));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Message);","map":{"version":3,"sources":["/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/Messages/Message.js"],"names":["React","Component","Avatar","Layout","qoobee","connect","ChatActions","ChatService","Header","Footer","headerStyle","height","backgroundColor","borderBottom","padding","footerStyle","borderTop","ChatName","marginTop","marginLeft","typeCauseScroll","pullCauseScroll","changeMessageCauseScroll","checkedConversations","Message","props","typeText","event","keyCode","shiftKey","message","target","value","temptMessages","state","allMessages","get","currentConversationId","push","id","sender","type","setState","websocket","send","document","getElementById","displayMessages","obj","console","log","messages","map","item","onMessageScroll","messageBoard","scrollTop","getMessage","appendMessages","concat","Map","prevProps","prevState","snapshot","scroll","scrollHeight","nextProps","nextContext","includes","getMessages","then","temptAllMessage","set","catch","error","socketMessage","borderLeft","fontSize","mapStateToProps","chatReducer","conversationId","socketReducer","mapDispatchToProps","dispatch","index","get_Message"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Avatar, Layout} from 'antd';\nimport qoobee from \"../../images/qoobee.jpg\";\nimport '../../css/Messages/messages.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport connect from \"react-redux/es/connect/connect\";\nimport {ChatActions} from '../../Redux/Actions/ChatActions';\nimport {ChatService} from '../../Services/ChatService';\nconst {\n    Header, Footer,\n} = Layout;\n\nconst headerStyle = {\n    height: '100px', backgroundColor: 'white', borderBottom: '1px solid #ebebe0 ', padding: '10px'\n}\n\nconst footerStyle = {\n    height: '80px', backgroundColor: 'white', borderTop: '1px solid #ebebe0 ', padding: '0px'\n}\n\nconst ChatName = {\n    marginTop: '-70px', marginLeft: '85px'\n}\n\nvar typeCauseScroll = false\nvar pullCauseScroll = false\nvar changeMessageCauseScroll = false;\n\nvar checkedConversations = [];\n\nclass Message extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            websocket: '',\n            allMessages: new Map(),\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (typeCauseScroll) {\n            // console.log(prevState.messages);\n            let messageBoard = document.getElementById('messages');\n            messageBoard.scroll(0, messageBoard.scrollHeight);\n            typeCauseScroll = false;\n            pullCauseScroll = false;\n            changeMessageCauseScroll = false;\n        } else if (pullCauseScroll) {\n            // console.log(prevState.messages);\n            let messageBoard = document.getElementById('messages');\n            messageBoard.scroll(0, 20);\n            typeCauseScroll = false;\n            pullCauseScroll = false;\n            changeMessageCauseScroll = false;\n        }else if(changeMessageCauseScroll){\n            let messageBoard = document.getElementById('messages');\n            messageBoard.scroll(0, messageBoard.scrollHeight);\n            changeMessageCauseScroll = false;\n            typeCauseScroll = false;\n            pullCauseScroll = false;\n        }\n\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.currentConversationId !== this.props.currentConversationId\n            && !checkedConversations.includes(nextProps.currentConversationId)\n        ) {\n            console.log(\"selected chatId \", nextProps.currentConversationId);\n            // this.props.getMessage(nextProps.currentConversationId, 0);\n            ChatService.getMessages(nextProps.currentConversationId)\n                .then(messages => {\n                    console.log(messages);\n                    let temptAllMessage = this.state.allMessages;\n                    temptAllMessage.set(nextProps.currentConversationId,messages.message)\n                    changeMessageCauseScroll = true;\n                    this.setState({allMessages: temptAllMessage});\n                    checkedConversations.push(nextProps.currentConversationId);\n                    console.log(this.state.allMessages);\n                })\n                .catch(error => {\n\n                });\n\n        } else {\n                changeMessageCauseScroll = true;\n                console.log('scroll to get messsage')\n        }\n        if(nextProps.socketMessage != null){\n            console.log('socket message ', nextProps.socketMessage);\n        }\n\n        // if (nextProps.messages !== this.props.messages) {\n        //     console.log(isScrolling);\n        //     if(!isScrolling) {\n        //         console.log(\"id \", this.props.currentConversationId, \" messsage\", nextProps.messages.message);\n        //         let temptAllMessage = this.state.allMessages;\n        //         // temptAllMessage.push(nextProps.messages);\n        //         temptAllMessage.set(this.props.currentConversationId, nextProps.messages.message)\n        //         this.setState({currentMessages: nextProps.messages.message});\n        //         this.setState({allMessages: temptAllMessage});\n        //         // changeMessageCauseScroll = true;\n        //         isScrolling = false;\n        //     }\n        //     else{\n        //     }\n        // }\n\n    }\n\n    typeText = (event) => {\n        // let code = (event.keyCode ? event.keyCode : event.which);\n        if (event.keyCode === 13 && !event.shiftKey) {\n            let message = event.target.value;\n            let temptMessages = this.state.allMessages;\n            temptMessages.get(this.props.currentConversationId).push({\n                id: \"4\",\n                sender: 'Nam',\n                type: 'sent',\n                message: message\n            });\n            this.setState({allMessages: temptMessages});\n            typeCauseScroll = true;\n            pullCauseScroll = false;\n            //send message to service API\n            this.props.websocket.send(message);\n            document.getElementById('textArea').value = \"\";\n        }\n    }\n\n\n    displayMessages = () => {\n        if (this.props.currentConversationId != null && this.state.allMessages.get(this.props.currentConversationId)!=null) {\n            var obj = this.state.allMessages.get(this.props.currentConversationId);\n            console.log('display ', obj);\n            const messages = obj.map((item) =>\n                <li className={item.type}>\n                    <img src=\"http://emilcarlsson.se/assets/mikeross.png\" alt=\"\"/>\n                    <p>{item.message}</p>\n                </li>\n            );\n            return messages;\n        }\n    }\n\n    onMessageScroll = (event) => {\n\n        let messageBoard = document.getElementById('messages');\n        if (messageBoard.scrollTop === 0&& this.state.allMessages.get(this.props.currentConversationId)!=null) {\n            this.props.getMessage(this.props.currentConversationId);\n            console.log(\"End\");\n            let messages = [\n                {\n                    id: \"1\",\n                    sender: 'Nam',\n                    type: 'sent',\n                    message: \"Nà ní\"\n                },\n                {\n                    id: \"2\",\n                    sender: 'BigBid',\n                    type: 'replies',\n                    message: \"nà ní 2\"\n                },\n                {\n                    id: \"3\",\n                    sender: 'Nam',\n                    type: 'sent',\n                    message: \"nà ní 2\"\n                }];\n            this.appendMessages(messages);\n            typeCauseScroll = false;\n            pullCauseScroll = true;\n        }\n\n    }\n\n    appendMessages = (messages) => {\n        let temptMessages = messages.concat(this.state.messages);\n        // temptMessages.concat(this.state.messages);\n        // console.log(temptMessages);\n        // this.setState({messages: temptMessages});\n        // this.state.\n        // console.log(this.state.messages);\n    }\n\n\n    render() {\n        return (\n            <Layout style={{borderLeft: \"1px solid #ebebe0\"}}>\n                <Header style={headerStyle}>\n                    <Avatar size={80} src={qoobee}/>\n                    <h3 style={ChatName}>Ms. QooBee</h3>\n                </Header>\n                <div className=\"messages\" onScroll={this.onMessageScroll} id=\"messages\">\n                    <ul>\n                        {this.displayMessages()}\n                    </ul>\n                </div>\n\n                <Footer style={footerStyle}>\n                    <div className=\"message-input\">\n                        <div className=\"wrap\">\n                            <form>\n                                <textarea id=\"textArea\" style={{backgroundColor: 'white'}}\n                                          placeholder=\"Write your message... \" onKeyDown={this.typeText}></textarea>\n                            </form>\n                            <div className=\"tool\">\n                                <button className=\"submit\" onClick={this.typeText}><i className=\"fa fa-paper-plane\"\n                                                                                      style={{fontSize: '24px'}}></i>\n                                </button>\n                            </div>\n\n                        </div>\n                    </div>\n                </Footer>\n\n            </Layout>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n            console.log()\n    return {\n        currentConversationId: state.chatReducer.conversationId,\n        websocket: state.socketReducer.websocket,\n        messages: state.chatReducer.messages,\n        socketMessage:state.socketReducer.socketMessage,\n    }\n};\nconst mapDispatchToProps = (dispatch) => ({\n    getMessage: (conversationId, index) => dispatch(ChatActions.get_Message(conversationId, index)),\n});\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Message);"]},"metadata":{},"sourceType":"module"}