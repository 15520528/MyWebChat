{"ast":null,"code":"import _classCallCheck from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lap11105-local/Documents/My repos/Id_1/app-design/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Side from './Side/Side.js';\nimport ChatPage from './HomePages/ChatPage';\nimport LoginRegister from './Login-Register/Login';\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport { history } from '../Helper/History';\nimport connect from \"react-redux/es/connect/connect\";\nimport { SocketActions } from \"../Redux/Actions/SocketActions\";\nimport Register from \"./Login-Register/Register\";\nimport { ChatActions } from \"../Redux/Actions/ChatActions\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      websocket: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var ws = new WebSocket('ws://localhost:6898/websocket');\n\n      ws.onopen = function () {\n        //after established socket successfully\n        _this2.props.FetchSocket(ws); //client send first request to update online and server send back a conversationsList which client's joined\n\n\n        var userID = JSON.parse(localStorage.getItem('user')).phone;\n        var firstRequest = {\n          messageType: \"firstRequest\",\n          content: {\n            userID: userID\n          }\n        };\n        ws.send(JSON.stringify(firstRequest));\n        var conversationList = [{\n          conversationID: \"1\",\n          conversationName: \"Tâm sự với em 1\"\n        }, {\n          conversationID: \"3\",\n          conversationName: \"Hội yêu cún\"\n        }, {\n          conversationID: \"8\",\n          conversationName: \"Hội yêu mèo\"\n        }, {\n          conversationID: \"11\",\n          conversationName: \"Bộ tộc Golden\"\n        }];\n\n        _this2.props.FetConversationList(conversationList); //\n        // let createdConversation = {\n        //     conversationID:'123',\n        //     conversationName:'nam va nhung nguoi ban'\n        // }\n        // this.props.FetchCreatedConversation(createdConversation);\n\n      };\n\n      ws.onerror = function (error) {\n        console.log('WebSocket Error ' + error);\n      };\n\n      ws.onmessage = function (e) {\n        console.log('Server nà n: ' + e.data);\n        var data = JSON.parse(e.data); //if createdConversation type -> this.props.FetchCreatedConversation(e.data);\n\n        if (data.messageType === 'createConversation') {\n          var createdConversation = {\n            conversationID: data.content.conversationID,\n            conversationName: data.content.conversationName\n          };\n\n          _this2.props.FetchCreatedConversation(createdConversation);\n        } //if loadconversations type -> this.props.FetConversationList(e.data);\n        //if message type -> this.props.FetchMessage();\n\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Router, {\n        history: history,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/login\",\n        component: LoginRegister,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/register\",\n        component: Register,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/home\",\n        component: Side,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(PrivateRoute, {\n        exact: true,\n        path: \"/\",\n        component: ChatPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    FetchSocket: function FetchSocket(socket) {\n      return dispatch(SocketActions.fetch_socket(socket));\n    },\n    FetchMessage: function FetchMessage(message) {\n      return dispatch(SocketActions.fetch_message(message));\n    },\n    FetchCreatedConversation: function FetchCreatedConversation(createdConversation) {\n      return dispatch(SocketActions.fetch_createdConversation(createdConversation));\n    },\n    FetConversationList: function FetConversationList(conversationList) {\n      return dispatch(SocketActions.fetch_ConversationList(conversationList));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/lap11105-local/Documents/My repos/Id_1/app-design/src/components/App.js"],"names":["React","Component","Side","ChatPage","LoginRegister","BrowserRouter","Router","Route","Redirect","history","connect","SocketActions","Register","ChatActions","App","props","state","websocket","ws","WebSocket","onopen","FetchSocket","userID","JSON","parse","localStorage","getItem","phone","firstRequest","messageType","content","send","stringify","conversationList","conversationID","conversationName","FetConversationList","onerror","error","console","log","onmessage","e","data","createdConversation","FetchCreatedConversation","mapStateToProps","mapDispatchToProps","dispatch","socket","fetch_socket","FetchMessage","message","fetch_message","fetch_createdConversation","fetch_ConversationList"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Side from './Side/Side.js';\nimport ChatPage from './HomePages/ChatPage';\nimport LoginRegister from './Login-Register/Login';\nimport {BrowserRouter as Router, Route, Redirect} from \"react-router-dom\";\nimport {history} from '../Helper/History';\n\nimport connect from \"react-redux/es/connect/connect\";\nimport {SocketActions} from \"../Redux/Actions/SocketActions\";\nimport Register from \"./Login-Register/Register\";\nimport {ChatActions} from \"../Redux/Actions/ChatActions\";\n\n\n\n\n\n\n\n\n\n\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            websocket: '',\n        };\n    }\n\n    componentDidMount() {\n        var ws = new WebSocket('ws://localhost:6898/websocket');\n\n        ws.onopen = () => {\n            //after established socket successfully\n            this.props.FetchSocket(ws);\n\n            //client send first request to update online and server send back a conversationsList which client's joined\n            let userID = JSON.parse(localStorage.getItem('user')).phone;\n            let firstRequest = {\n                messageType: \"firstRequest\",\n                content: {\n                    userID: userID\n                }\n            }\n\n            ws.send(JSON.stringify(firstRequest));\n\n            let conversationList = [\n                {\n                    conversationID: \"1\",\n                    conversationName: \"Tâm sự với em 1\"\n                },\n                {\n                    conversationID: \"3\",\n                    conversationName: \"Hội yêu cún\"\n                },\n                {\n                    conversationID: \"8\",\n                    conversationName: \"Hội yêu mèo\"\n                },\n                {\n                    conversationID: \"11\",\n                    conversationName: \"Bộ tộc Golden\"\n                },\n            ];\n            this.props.FetConversationList(conversationList);\n            //\n            // let createdConversation = {\n            //     conversationID:'123',\n            //     conversationName:'nam va nhung nguoi ban'\n            // }\n            // this.props.FetchCreatedConversation(createdConversation);\n        };\n        ws.onerror = function (error) {\n            console.log('WebSocket Error ' + error);\n        };\n        ws.onmessage = (e) => {\n            console.log('Server nà n: ' + e.data);\n            let data = JSON.parse(e.data);\n            //if createdConversation type -> this.props.FetchCreatedConversation(e.data);\n            if (data.messageType === 'createConversation') {\n                let createdConversation = {\n                    conversationID: data.content.conversationID,\n                    conversationName: data.content.conversationName\n                }\n                this.props.FetchCreatedConversation(createdConversation);\n            }\n\n            //if loadconversations type -> this.props.FetConversationList(e.data);\n\n            //if message type -> this.props.FetchMessage();\n\n        };\n    }\n\n    render() {\n        return (\n            <Router history={history}>\n                <div>\n                    <Route path=\"/login\" component={LoginRegister}/>\n                    <Route path=\"/register\" component={Register}/>\n                    <Route path=\"/home\" component={Side}/>\n                    <PrivateRoute exact path='/' component={ChatPage}/>\n                </div>\n            </Router>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {}\n}\nconst mapDispatchToProps = (dispatch) => ({\n    FetchSocket: (socket) => dispatch(SocketActions.fetch_socket(socket)),\n    FetchMessage: (message) => dispatch(SocketActions.fetch_message(message)),\n    FetchCreatedConversation: (createdConversation) => dispatch(SocketActions.fetch_createdConversation(createdConversation)),\n    FetConversationList: (conversationList) => dispatch(SocketActions.fetch_ConversationList(conversationList)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(App);\n"]},"metadata":{},"sourceType":"module"}